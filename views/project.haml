!!!
!!! 5
%html
  %head
    %title= @report[:summary][:study_title]
    %meta{:charset => "utf-8"}
    %link{:rel => :stylesheet, :href => "//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css", :type => "text/css"}
    %link{:rel => :stylesheet, :href => "#{app_root}/css/sra15.css", :type => "text/css"}
    %link{:rel => :stylesheet, :href => "#{app_root}/css/bootstrap.min.css", :type => "text/css"}
    %link{:rel => :stylesheet, :href => "#{app_root}/css/bootstrap-theme.min.css", :type => "text/css"}
    %script{ :src => "https://code.jquery.com/jquery-1.11.2.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/d3.min.js" }
    %script{ :src => "#{app_root}/js/jquery.tablesorter.min.js" }
    %script{ :src => "#{app_root}/js/jquery.tablesorter.widgets.min.js" }

  %body
    #container
      -#header section
      #header.sub
        .content
          .box.box1
            %img{:src => "#{app_root}/images/DBCLS_SRA_logo.png", :height => "115"}
          .box.box2
            %h1
              DBCLS
              %span.or SRA
          .box.box3
            %ul
              %li
                %a{:href => "http://github.com/inutano/sra_metadata_toolkit"}
                  %i.fa.fa-github-square
              %li
                %a{:href => "http://twitter.com/inutano"}
                  %i.fa.fa-twitter
              %li
                %a{:href => "http://trattoriainutano.tumblr.co"} blog
              %li
                %a{:href => "#{app_root}"} Home

      -# main section
      #main.result
        .content
          -# Summary block
          %h2 Project Summary
          %h3=@report[:summary][:stucy_title]
          %table.project-summary
            %thead
              %tr
                %th Study Type
                %th Sample Organism
                %th Sequencing Platform
            %tbody
              %tr
                %td= @report[:summary][:type]
                %td= @report[:summary][:species].join(", ")
                %td= @report[:summary][:instrument].join(", ")

          - if @report[:paper]
            - @report[:paper].each do |paper|
              .article-summary
                %h2 Article Summary
                %h3= paper[:title]
                %blockquote
                  %small= paper[:authors].join(", ")
                  %small= paper[:journal] + ", " + paper[:date]
                  %p= paper[:abstract]
                .row
                  .table_option
                    - pm_base = "http://www.ncbi.nlm.nih.gov/pubmed/"
                    - pmc_base = "http://www.ncbi.nlm.nih.gov/pmc/articles/"
                    %a{:href => pm_base + paper[:pubmed_id] }
                      %button
                        %i.fa.fa-file-o
                        PubMed
                    - if paper[:pmc]
                      %a{:href}
                        %button{:onclick => ""}
                          %i.fa.fa-file-o
                          PMC

                - if paper[:pmc]
                  - pmc = paper[:pmc]
                  - if !pmc[:methods].empty?
                    %h3 Methods
                    .accordion#accordion2
                      - pmc[:methods].each do |section_methods|
                        - if section_methods.has_key?(:subsec)
                          - section_methods[:subsec].each do |subsec|
                          - nospace = subsec[:subsec_title].gsub("\s","_")
                            .accordion-group
                              .accordion-heading
                                %a.accordion-toggle{ "data-toggle" => "collapse", "data-parent" => "#accordion2", :href => nospace.sub(/^/,"\#") }
                                  = subsec[:subsec_title]
                              .accordion-body.collapse{ :id => nospace }
                                .accordion-inner
                                  %blockquote
                                    %p= subsec[:subsec_text].join("\n")
                        - else
                          - nospace = section_methods[:sec_title].gsub("\s","_")
                          .accordion-group
                            .accordion-heading
                              %a.accordion-toggle{ "data-toggle" => "collapse", "data-parent" => "#accordion2", :href => nospace.sub(/^/,"\#") }
                                = section_methods[:sec_title]
                            .accordion-body.collapse{ :id => nospace }
                              .accordion-inner
                                %blockquote
                                  %p= section_methods[:sec_text].join("\n")

                  - if !pmc[:results].empty?
                    %h3 Results
                    .accordion#accordion3
                      - pmc[:results].each do |section_results|
                        - if section_results.has_key?(:subsec)
                          - section_results[:subsec].each do |subsec|
                          - nospace = subsec[:subsec_title].gsub("\s","_")
                            .accordion-group
                              .accordion-heading
                                %a.accordion-toggle{ "data-toggle" => "collapse", "data-parent" => "#accordion3", :href => nospace.sub(/^/,"\#") }
                                  = subsec[:subsec_title]
                              .accordion-body.collapse{ :id => nospace }
                                .accordion-inner
                                  %blockquote
                                    %p= subsec[:subsec_text].join("\n")
                        - else
                          - nospace = section_results[:sec_title].gsub("\s","_")
                          .accordion-group
                            .accordion-heading
                              %a.accordion-toggle{ "data-toggle" => "collapse", "data-parent" => "#accordion2", :href => nospace.sub(/^/,"\#") }
                                = section_results[:sec_title]
                            .accordion-body.collapse{ :id => nospace }
                              .accordion-inner
                                %blockquote
                                  %p= section_results[:sec_text].join("\n")

                    %h3 Cited by
                    - num_cb = pmc[:cited_by].size
                    - publication_s = num_cb == 1 ? " publication cites" : " publications cite"
                    %h4= num_cb.to_s + publication_s + " this article"
                    %ul.cited-by
                    - pmc[:cited_by].each do |citedby|
                      %li
                        %a{ :href => "http://www.ncbi.nlm.nih.gov/pmc/articles/#{citedby[:pmcid]}" }= citedby[:title]

          -# Sequencing Profile block
          .row
            %h2 Sequencing Profile
            .info
              - num_runs = @report[:run_table].size
              - sequencing_s = num_runs == 1 ? " of Sequencing" : " of Sequencings"
              %h4= num_runs.to_s + sequencing_s + " (Based on Run ID)"
              .row
                .table_option
                  %a{:href => "#{app_root}/data/#{@report[:summary][:study_id]}?dtype=run&retmode=tsv"}
                    %button
                      %i.fa.fa-file-o
                      TSV
                  %a{:href => "#{app_root}/data/#{@report[:summary][:study_id]}?dtype=run&retmode=json"}
                    %button
                      %i.fa.fa-file-o
                      JSON

          .list
            %table.experiment.tablesorter#runList
              %thead
                %tr
                  %th Run ID
                  %th Sample ID
                  %th Study Type
                  %th Sample Organism
                  %th Sequencing Instrument
                  %th Library Layout
                  %th Total Number of Sequence
                  %th Sequence Length
                  %th Download
              %tbody
                - @report[:run_table].each do |row|
                  - subid = row[:submission_id]
                  - expid = row[:experiment_id]
                  - runid = row[:run_id]
                  - ddbj_base = "ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra"
                  - ebi_base = "ftp://ftp.sra.ebi.ac.uk/vol1/fastq"
                  - ncbi_base = "ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra"
                  - if !row[:read_profile]
                    %tr
                      %td
                        %a{ :href => "#{app_root}/view/#{runid}" }= runid
                      %td
                        - row[:sample_id].each do |id|
                          %a{ :href => "##{id}" }= id
                      %td= row[:study_type]
                      %td= row[:species].join(", ")
                      %td= row[:instrument]
                      %td
                        - if row[:lib_layout] == "PAIRED"
                          - orient = "library orientation: #{row[:lib_orientation]}"
                          - nlength = "nominal length: #{row[:lib_nominal_length]}"
                          - nsdev = "nominal sdev: #{row[:lib_nominal_sdev]}"
                          - content = [orient, nlength, nsdev].join(", ")
                          %a.library{ "data-toggle" => "popover", "data-original-title" => "Library Info", "data-content" => content }
                            = row[:lib_layout]
                        - else
                          = row[:lib_layout]
                      %td no data
                      %td no data
                      %td
                        .dropdown
                          %a.dropdown-toggle{ :href => "#", "data-toggle" => "dropdown" } FTP
                          %ul.dropdown-menu{ "role" => "menu", "aria-lebbledby" => "dLabel" }
                            %li
                              %a{ :href => "#{File.join(ddbj_base, "fastq", subid.slice(0..5), subid, expid)}" } DDBJ/FASTQ
                            %li
                              %a{ :href => "#{File.join(ddbj_base, "sralite/ByExp/litesra", expid.slice(0..2), expid.slice(0..5), expid)}" } DDBJ/SRALite
                            %li
                              %a{ :href => "#{File.join(ebi_base, runid.slice(0..5), runid)}" } ENA/FASTQ
                            %li
                              %a{ :href => "#{File.join(ncbi_base, runid.slice(0..2), runid.slice(0..5), runid)}" } NCBI/SRALite

                  - else
                    - row[:read_profile].each do |read|
                      %tr
                        %td
                          %a{ :href => "#{app_root}/view/#{read[:read_id]}" }= read[:read_id]
                        %td
                          - row[:sample_id].each do |id|
                            %a{ :href => "##{id}" }= id
                        %td= row[:study_type]
                        %td= row[:species].join(", ")
                        %td= row[:instrument]
                        %td
                          - if row[:lib_layout] == "PAIRED"
                            - orient = "library orientation: #{row[:lib_orientation]}"
                            - nlength = "nominal length: #{row[:lib_nominal_length]}"
                            - nsdev = "nominal sdev: #{row[:lib_nominal_sdev]}"
                            - content = [orient, nlength, nsdev].join(", ")
                            %a.library{ "data-toggle" => "popover", "data-original-title" => "Library Info", "data-content" => content }
                              = row[:lib_layout]
                          - else
                            = row[:lib_layout]
                        %td= read[:total_seq]
                        %td= read[:seq_length]
                        %td
                          .dropdown
                            %a.dropdown-toggle{ :href => "#", "data-toggle" => "dropdown" } FTP
                            %ul.dropdown-menu{ "role" => "menu", "aria-lebbledby" => "dLabel" }
                              %li
                                %a{ :href => "#{File.join(ddbj_base, "fastq", subid.slice(0..5), subid, expid)}" } DDBJ/FASTQ
                              %li
                                %a{ :href => "#{File.join(ddbj_base, "sralite/ByExp/litesra", expid.slice(0..2), expid.slice(0..5), expid)}" } DDBJ/SRALite
                              %li
                                %a{ :href => "#{File.join(ebi_base, runid.slice(0..5), runid)}" } ENA/FASTQ
                              %li
                                %a{ :href => "#{File.join(ncbi_base, runid.slice(0..2), runid.slice(0..5), runid)}" } NCBI/SRALite

          %h2 Sample Profile
          .info
            - num_samples = @report[:sample_table].size
            - sample_s = num_samples == 1 ? " Sample" : "Samples"
            %h4= num_samples.to_s + sample_s

            .row
              .table_option
                %a{:href => "#{app_root}/data/#{@report[:summary][:study_id]}?dtype=sample&retmode=tsv"}
                  %button
                    %i.fa.fa-file-o
                    TSV
                %a{:href => "#{app_root}/data/#{@report[:summary][:study_id]}?dtype=sample&retmode=json"}
                  %button
                    %i.fa.fa-file-o
                    JSON

          .list
            %table.experiment.tablesorter#sampleList
              %thead
                %tr
                  %th Sample ID
                  %th Sample Title
                  %th Sample Description
                  %th Run ID
              %tbody
                - sample_table = @report[:sample_table]

                // # highlight uniq words in sample description
                - description_array = sample_table.map{|n| n[:sample_description] }.compact
                - min_sentences = description_array.map{|n| n.split("\s") }.uniq
                - bag_of_words = min_sentences.size == 1 ? [] : min_sentences.flatten
                - uniq_words = bag_of_words.group_by{|i| i }.select{|k,v| v.size == 1 }.keys

                - sample_table.each do |row|
                  - desc = row[:sample_description]
                  %tr{ :id => row[:sample_id] }
                    %td= row[:sample_id]
                    %td= row[:sample_title]
                    - if desc
                      %td
                        - desc.split("\s").map do |w|
                          - if uniq_words.include?(w)
                            %span.highlight= w
                          - else
                            = w
                    - else
                      %td= desc
                    %td= row[:run_id_list].join(", ")

          %h2 Linkout/Resources
          .linkout
            %ul.fa-ul
              - studyid = @report[:summary][:study_id]
              %li
                %i.fa-li.fa.fa-external-link-square
                %a{:href => "http://trace.ddbj.nig.ac.jp/DRASearch/study?acc=" + studyid }
                  DRASearch - DDBJ/DRA
              %li
                %i.fa-li.fa.fa-external-link-square
                %a{:href => "http://www.ebi.ac.uk/ena/data/view/" + studyid }
                  ENA Browser - EBI/ENA

      -# Scroll Back button
      #page-top
        %p#move-page-top
          %i.fa.fa-angle-double-up

      /Footer Section
      #footer
        .content
          %a{:rel => "license", :href => "http://creativecommons.org/licenses/by/3.0/"}
            %img{:alt => "Creative Commons License", :style => "border-width:0", :src => "https://i.creativecommons.org/l/by/3.0/80x15.png"}
          %span{"xmlns:dct" => "http://purl.org/dc/terms/", :property => "dct:title"} DBCLS SRA
          is licensed under a
          %a{:rel => "license", :href => "http://creativecommons.org/licenses/by/3.0/"} Creative Commons Attribution 3.0
            Unported License

    :javascript
      $(document).ready(function () {
        $("#runList").tablesorter({
            theme: 'default',
            cssChildRow: "tablesorter-childRow",
            widgets: ["zebra", "filter", "pager"],

            widgetOptions: {
                pager_output: '{startRow} - {endRow} / {filteredRows} ({totalRows})', // '{page}/{totalPages}'
                pager_removeRows: false,
                filter_childRows: true,
                filter_cssFilter: 'tablesorter-filter',
                filter_startsWith: false,
                filter_ignoreCase: true
            }
        });

        $("#sampleList").tablesorter({
            theme: 'default',
            cssChildRow: "tablesorter-childRow",
            widgets: ["zebra", "filter", "pager"],

            widgetOptions: {
                pager_output: '{startRow} - {endRow} / {filteredRows} ({totalRows})', // '{page}/{totalPages}'
                pager_removeRows: false,
                filter_childRows: true,
                filter_cssFilter: 'tablesorter-filter',
                filter_startsWith: false,
                filter_ignoreCase: true
            }
        });
        $(window).scroll(function () {
            var v = $(window).scrollTop();
            var u = $('body').height() - (v + $(window).height());
            if (v > 1500 && 200 > u) {
                $("#page-top").fadeIn("fast");
            } else {
                $("#page-top").fadeOut("fast");
            }
        });
        $("#move-page-top").click(function () {
            $('html,body').animate({scrollTop: 0}, 'fast');
        });
      });
